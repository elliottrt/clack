fsilent

# A collection of utility functions for clack

# simple derivation

var deriv_eps 0.0001
def deriv(&f, x, e) ((&f(x+e)-&f(x))/e)
def deriv(&f, x) deriv(&f, x, deriv_eps)

# random numbers
def randrange(min, max) (rand() * (max - min)) + min
def randrangei(min, max) floor(randrange(min, max))

# useful functions

def abs(x) (x * ((x >= 0) * 2 - 1))
def sign(x) x / abs(x)

def max(a, b) ((a >= b) * a + (a < b) * b)
def min(a, b) ((a <= b) * a + (a > b) * b)

def clamp(x, mi, ma) min(max(x, mi), ma)

# logic

def not(x) !x
def and(x, y) x && y
def or(x, y) x || y
def xor(x,y) (x && !y) || (!x && y)
def nand(x,y) !(x&&y)
def nor(x,y) !(x||y)
def xnor(x,y) !nor(x, y)

def bin(x) !!x

# control

def if(condition, &then) condition && &then()
def if(condition, &then, &else) (condition && &then()) + (!condition && &else())

def do(&func, times) times * &func() * do(&func, times - 1)
def do(&func, a0, times) times * &func(a0) * do(&func, a0, times - 1)
def do(&func, a0, a1, times) times * &func(a0, a1) * do(&func, a0, a1, times - 1)
def do(&func, a0, a1, a2, times) times * &func(a0, a1, a2) * do(&func, a0, a1, a2, times - 1)

fsilent